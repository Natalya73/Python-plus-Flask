На этот раз вам необходимо создать простое клиент-серверное приложение WSGI+HTTP для управления звуковыми файлами.
Во-первых, сервер. Он не должен использовать никакую базу данных, достаточно простого хранения файлов на диске. Веб-интерфейс должен работать на порту 8888. При открытии веб-страница должна показывать список уже загруженных звуковых файлов, а также кнопку для загрузки еще одного. Как пользователь, вы должны иметь возможность нажать на эту кнопку, загрузить файл на сервер, и он должен появиться в списке файлов, показанных на веб-странице.
Кроме того, сервер должен выполнить проверку типа MIME , поэтому принимаются только аудиофайлы (например mp3, oggи wav). Если загружен неаудиофайл (например
 jpg, exeили docx), он должен быть отклонен, а на веб-странице должно отображаться сообщение «Обнаружен неаудиофайл».
За некоторые бонусные баллы вы можете реализовать воспроизведение загруженных звуковых файлов прямо с веб-страницы.
На этот раз вы не ограничены встроенным сервером WSGI, поэтому рекомендуется использовать фреймворк Flask 
или Django для этой задачи, хотя это и не является строгим требованием. Не забудьте добавить любые сторонние зависимости, которые вы использовали, в file
 requirements.txt. Также включите файл, READMEобъясняющий, как запустить HTTP-сервер (он должен содержать конкретную команду для запуска).
Во-вторых, клиент. Это должно быть приложение командной строки с двумя возможными действиями:


python screwdriver.py upload /path/to/file.mp3следует загрузить локальный аудиофайл
 /path/to/file.mp3на сервер

python screwdriver.py listдолжен извлечь и распечатать имена всех файлов, которые в данный момент присутствуют на сервере.

Все взаимодействие клиент-сервер должно осуществляться с использованием HTTP. Рекомендуется (хотя и не строго обязательно) использовать либо Requests ,
 либо HTTPX- библиотеку для выполнения HTTP-запросов.